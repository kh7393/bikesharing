%matplotlib inline
import sqlite3
from pandasql import sqldf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from dateutil import parser
import xlrd
from pandas import ExcelWriter
from uszipcode import ZipcodeSearchEngine
import plotly.plotly as py


# get the zips database

zips = pd.io.parsers.read_csv('https://github.com/kh7393/bikesharing/blob/master/uszipsv1.1.csv?raw=true', dtype={'zip': 'str'})
zips['zip'] = zips.zip.astype(str)

df = pd.io.parsers.read_csv('201408_trip_data.csv', dtype={'Zip Code': 'str'})
df['Start Date'] = pd.to_datetime(df['Start Date'])
df['End Date'] = pd.to_datetime(df['End Date'])
df['Start Day of Week'] = df['Start Date'].dt.strftime('%A')
df['End Day of Week'] = df['End Date'].dt.strftime('%A')
df['Start Date Month'] = df['Start Date'].dt.strftime('%B')
df['End Date Month'] = df['End Date'].dt.strftime('%B')
df['Start Hour'] = df['Start Date'].dt.strftime('%H')
df['End Hour'] = df['End Date'].dt.strftime('%H')
df['Duration_parsed'] = pd.to_timedelta(df['Duration'], unit='m')
df['Route'] = df['Start Station'] + "-" + df['Start Terminal'].astype(str) + " -> " + df['End Station'] + "-" + df['End Terminal'].astype(str)

# -- prepare common join columns
zips.rename(columns=dict(zip='Zip Code',
                         city='subscriber_city'), 
            inplace=True)  
# specify join columns along with zips' columns to copy
cols = ['Zip Code', 'subscriber_city', 'state', 'lat', 'lng']
df = df.merge(zips[cols], how='left')
df.head(10)
df.apply(pd.Series.nunique)
df_filter = df.sort_values(by=['Duration'], ascending=False)
df_filter = df_filter.head(10)

a = (df['Duration'].mean())/60
a = str(a)
print "The mean ride duration is " + a 

# get trip duration and breakdown by user type
df_filter_customer = df[df['Subscriber Type'] == 'Customer']
df_filter_customer_mins = df_filter_customer['Duration'] / 60
(df_filter_customer['Duration'].mean())
(df_filter_customer['Duration'].mean())/60

fig, ax = plt.subplots()
bins = np.linspace(2, 150, 20, endpoint=True)
plt.title('Customer Trips - frequency breakdown by Trip Duration')
plt.xlabel('Duration (mins)')
plt.ylabel('Frequency')
ax.hist(df_filter_customer_mins, bins, orientation='vertical')
plt.show()

df_filter_subscriber = df[df['Subscriber Type'] == 'Subscriber']
df_filter_subscriber_mins = df_filter_subscriber['Duration'] / 60
(df_filter_subscriber['Duration'].mean())
(df_filter_subscriber['Duration'].mean())/60

fig, ax = plt.subplots()
bins = np.linspace(2, 150, 20, endpoint=True)
plt.title('Subscriber Trips - frequency breakdown by Trip Duration')
plt.xlabel('Duration (mins)')
plt.ylabel('Frequency')
ax.hist(df_filter_subscriber_mins, bins, orientation='vertical')
plt.show()

user_breakdown = df.groupby(['Subscriber Type'])['Trip ID'].count()

day_of_week = df.groupby(['Start Day of Week', 'Subscriber Type'])['Trip ID'].count()
print day_of_week
day_of_week.unstack()
day_of_week_plot = day_of_week.unstack().plot(kind='bar',stacked=True,title="Subscriber Breakdown by Day of Week")
day_of_week_plot.set_xlabel("Day of Week")
day_of_week_plot.set_ylabel("No. of Trips")

weekend = ['Saturday', 'Sunday']
df_filter_weekend = df[df['Start Day of Week'].isin(weekend)]

hour_of_day_weekend = df_filter_weekend.groupby(['Start Hour', 'Subscriber Type'])['Trip ID'].count()
print hour_of_day_weekend
hour_of_day_weekend.unstack()
hour_of_day_weekend_plot = hour_of_day_weekend.unstack().plot(kind='bar',stacked=True,title="Subscriber Breakdown by Hour of Day (Weekend)")
hour_of_day_weekend_plot.set_xlabel("Hour of Day")
hour_of_day_weekend_plot.set_ylabel("No. of Trips")


df_filter_weekday = df[~df['Start Day of Week'].isin(weekend)]

hour_of_day_weekday = df_filter_weekday.groupby(['Start Hour', 'Subscriber Type'])['Trip ID'].count()
print hour_of_day_weekday
hour_of_day_weekday.unstack()
hour_of_day_weekday_plot = hour_of_day_weekday.unstack().plot(kind='bar',stacked=True,title="Subscriber Breakdown by Hour of Day (Weekday)")
hour_of_day_weekday_plot.set_xlabel("Hour of Day")
hour_of_day_weekday_plot.set_ylabel("No. of Trips")

# most popular stations - weekend, customer
station_weekend = pd.pivot_table(df_filter_weekend,index=['Start Station'],columns=['Subscriber Type'],values=['Trip ID'],aggfunc=[len])
station_weekend_customer = station_weekend[('len', 'Trip ID', 'Customer')]
station_weekend_customer.nlargest(10)

station_weekend_end = pd.pivot_table(df_filter_weekend,index=['End Station'],columns=['Subscriber Type'],values=['Trip ID'],aggfunc=[len])
station_weekend_end_customer = station_weekend_end[('len', 'Trip ID', 'Customer')]
station_weekend_end_customer.nlargest(10)

# most popular stations - weekend, subscriber
station_weekend_subscriber = station_weekend[('len', 'Trip ID', 'Subscriber')]
print station_weekend_subscriber.nlargest(10)

station_weekend_end_customer = station_weekend_end[('len', 'Trip ID', 'Subscriber')]
station_weekend_end_customer.nlargest(10)

# most popular stations - weekday, customer
station_weekday = pd.pivot_table(df_filter_weekday,index=['Start Station'],columns=['Subscriber Type'],values=['Trip ID'],aggfunc=[len])
station_weekday_customer = station_weekday[('len', 'Trip ID', 'Customer')]
print station_weekday_customer.nlargest(10)

station_weekday_end = pd.pivot_table(df_filter_weekday,index=['End Station'],columns=['Subscriber Type'],values=['Trip ID'],aggfunc=[len])
station_weekday_end_customer = station_weekday_end[('len', 'Trip ID', 'Customer')]
station_weekday_end_customer.nlargest(10)

# most popular stations - weekday, subscriber
station_weekday_subscriber = station_weekday[('len', 'Trip ID', 'Subscriber')]
print station_weekday_subscriber.nlargest(10)

station_weekday_end_customer = station_weekday_end[('len', 'Trip ID', 'Subscriber')]
station_weekday_end_customer.nlargest(10)

# monthly trends - number of trips
df['Start Date_Short'] = df['Start Date'].dt.strftime('%Y-%m-%d')
monthly_trips = df.groupby(['Start Date_Short'])['Trip ID'].count()
monthly_trips_plot = monthly_trips.plot(title="No. of trips by Month")
monthly_trips_plot.set_xlabel("Month")
monthly_trips_plot.set_ylabel("No. of Trips")

# top 10 users by city
user_city = pd.pivot_table(df, index=['subscriber_city'], values=['Trip ID'], aggfunc=[len])
user_city = user_city.sort_values(('len', 'Trip ID'), ascending=False).head(10)

# top 10 routes
user_routes = pd.pivot_table(df, index=['Route'], values=['Trip ID'], aggfunc=[len])
user_routes.sort_values(('len', 'Trip ID'), ascending=False).head(10)

# Subscriber city Export for Viz
user_city_export = pd.pivot_table(df, index=['Subscriber Type', 'subscriber_city', 'lat', 'lng'], values=['Trip ID'], aggfunc=[len])

# use only for manual exports to excel or csv

writer = ExcelWriter('bikeshareoutput.xlsx')
user_city_export.to_excel(writer,'Sheet1')
writer.save()


